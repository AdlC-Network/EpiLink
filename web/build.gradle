import com.hierynomus.gradle.license.tasks.*

plugins {
  alias(libs.plugins.node)
  // TODO https://github.com/gradle/gradle/issues/17968
  id 'com.github.hierynomus.license'

  id "java" // For easier jar creation (not strictly necessary but would require more config without it)
}

String backEndUrl() {
  if (project.hasProperty("backendUrl")) {
    return project.property("backendUrl")
  } else if (project.hasProperty("withFrontend")) {
    return "/"
  } else {
    return null
  }
}

task bundleWeb(type: NpmTask) {
  inputs.file('package-lock.json')
  inputs.files(fileTree('src'))
  inputs.files(fileTree('assets'))
  inputs.file('package.json')
  inputs.file('vue.config.js')
  inputs.file('babel.config.js')
  inputs.property("backendUrl", backEndUrl())
  outputs.dir(layout.buildDirectory.dir("web"))

  dependsOn npmInstall
  args = ['run', 'prod']

  String backendUrl = backEndUrl()
  if (backendUrl != null)
    environment = ['BACKEND_URL': backendUrl]
}

task frontendJar(type: Jar) {
  archiveBaseName = 'epilink-frontend'
  from(bundleWeb) {
    into "frontend"
  }
  from fileTree("bundled/")
}

configurations {
  frontendJarCfg {
    canBeConsumed = true
    canBeResolved = false
  }
}

artifacts {
  frontendJarCfg(frontendJar)
}

task serveWeb(type: NpmTask) {
  dependsOn npmInstall
  args = ['run', 'serve']

  String backendUrl = backEndUrl()
  if (backendUrl != null)
    environment = ['BACKEND_URL': backendUrl]
}

task licenseFormatJs(type: LicenseFormat) {
  source fileTree("src").include("**/*.js", "**/*.vue", "**/*.scss")
}

task licenseCheckJs(type: LicenseCheck) {
  source fileTree("src").include("**/*.js", "**/*.vue", "**/*.scss")
}

license {
  header rootProject.file("LHEADER")
  mapping {
    scss = "JAVADOC_STYLE"
    vue = "XML_STYLE"
  }
}

licenseFormat.dependsOn licenseFormatJs
tasks["license"].dependsOn licenseCheckJs
