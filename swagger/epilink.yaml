openapi: 3.0.1
info:
  title: EpiLink API (beta)
  description: |
    This is the API for EpiLink, a server authentication system for Discord. It is still WIP.

    This will be the replacement for the old Docsify.js-based API documentation.

    For more information on EpiLink, check out:
    - The EpiLink website: <https://epilink.zoroark.guru>
  license:
    name: Mozilla Public License version 2
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: "0.7"
servers:
  - url: "{protocol}://{backendHost}/api/v1"
    variables:
      backendHost:
        default: my.epilinkinstance.org
        description: The host name for your EpiLink instance
      protocol:
        enum:
          - http
          - https
        default: https
        description: The protocol to use.
tags:
  - name: meta
    description: Metadata endpoints for discovering information about an instance
  - name: user
    description: User endpoints for retrieving information on the currently logged in user.
paths:
  /meta/info:
    get:
      tags: [meta]
      summary: Returns information about the EpiLink instance
      responses:
        '200':
          description: A JSON ApiResponse containing an InstanceInformation object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InstanceInformation'
              example:
                success: true
                message: null
                message_i18n: null
                message_i18n_data: {}
                data:
                  title: "My Instance"
                  logo: "https://raw.githubusercontent.com/EpiLink/EpiLink/dev/assets/epilink256.png"
                  background: null
                  authorizeStub_idProvider: "https://..."
                  authorizeStub_discord: "https://..."
                  providerName: "My Identity Provider"
                  providerIcon: null
                  idPrompt: "<p>Pizza will be ordered and robots will invade if you give us your identity</p>"
                  footerUrls:
                    - name: My website
                      url: https://zoroark.guru
                    - name: Another website
                      url: https://litarvan.com
                  contacts:
                    - name: Xavier Loginard
                      email: xavier.loginard@school.edu
                    - name: Mestel Bural-Nesfa
                      email: mester@lab.school.edu
  /meta/{legalText}:
    get:
      tags: [meta]
      summary: Returns the requested legal text document for this instance.
      description: The terms of services or privacy policy for this EpiLink instance are returned. This can be inline HTML or a PDF document. Clients should differentiate between the two using the returned Content-Type header.
      parameters:
        - in: path
          name: legalText
          schema:
            type: string
            enum: ["tos", "privacy"]
            default: tos
          required: true
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
              example: A PDF document
            text/html:
              schema:
                type: string
                format: html
              example: <p>Some HTML</p>
  /meta/{resource}:
    get:
      tags: [ meta ]
      summary: Returns the requested resource only if said resource is configured to be self-hosted
      description: |
        This endpoint only works if the resource is set to be hosted directly the back-end instead of being hosted somewhere else. You should not use this endpoint directly, use the corresponding field in the `/meta/info` endpoint instead.

        The content type returned by this endpoint heavily depends on the server's configuration.

        Possible values are:

        - `logo`: The logo for this instance.

        - `background`: The background image for this instance

        - `idpLogo`: The identity provider's logo for this instance
      parameters:
        - in: path
          name: resource
          schema:
            type: string
            enum: [ "logo", "background", "ipdLogo" ]
            default: logo
          required: true
      responses:
        '200':
          description: OK, resource is returned.
          content:
            "*/*":
              schema:
                type: string
                format: binary
              example: Something that corresponds to the requested resource.
  /user:
    get:
      tags: ["user"]
      summary: Retrieve information on the logged in user
      description: |
        Use this endpoint to retrive information on the currently logged in user.

        As the session ID parameter is fully opaque, you cannot use it to know "stuff" on the user. Use this endpoint to
        discover information on them.
      security:
        - SessionId: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserInformation'
              example:
                message: null
                message_i18n: null
                message_i18n_data: {}
                data:
                  discordId: "1234567890"
                  username: "TheUser#1324"
                  avatarUrl: null
                  identifiable: true
                  privileged: false
        '401':
          $ref: '#/components/responses/UserUnauthorized'

components:
  schemas:
    # ---------------------- general schemas ----------------------
    ApiResponse:
      type: object
      description: Almost all API endpoints return something of this form. Endpoints will inject their resulting data in an additional "data" property
      properties:
        success:
          type: boolean
        message:
          type: string
        message_i18n:
          type: string
        message_i18n_data:
          type: object
          additionalProperties:
            type: string
    ErrorData:
      type: object
      description: The "data" field for errors (when success is false in an apiresponse)
      properties:
        code:
          type: integer
        description:
          type: string
    ApiErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ErrorData'
    # ---------------------- /meta schemas ----------------------
    InstanceInformation:
      type: object
      properties:
        title:
          type: string
          description: The name of the instance
        logo:
          type: string
          format: url
          description: A URL to the logo of the instance, either absolute (`https://...`) or with a leading /, indicating that it is under the back-end's hostname.
          nullable: true
        background:
          type: string
          format: url
          description: A URL to the background image for this instance, same format as for the logo.
          nullable: true
        authorizeStub_idProvider:
          type: string
          format: url
          description: |
            The value for both `authorizeStub` properties are OAuth2 authorization links (the ones you use for retrieving an authorization code) that are only missing a redirect URI. Append your own URI there. Don't forget to encode it as a URI component to properly escape special characters! (i.e. append `&redirect_uri=https://myexample.com/...` to the `authorizeStub` field).

              This property is for the identity provider (e.g. Microsoft, Google, ...)
        authorizeStub_discord:
          type: string
          format: url
          description: |
            Same use as `authorizeStub_idProvider`, but this one is for Discord.
        providerName:
          type: string
          description: |
            The display name for the identity provider. Human-friendly.
        providerIcon:
          type: string
          format: url
          description: |
            The icon for the identity provider, same format as for `logo`.
          nullable: true
        idPrompt:
          type: string
          format: html
          description: |
            The text that should be shown below the "I want EpiLink to rememver my identity" checkbox.
            This is inline HTML that is meant to be embedded within a web page.
        footerUrls:
          type: array
          items:
            $ref: '#/components/schemas/FooterUrl'
          description: |
            Footer URL's that should be displayed on the front-end.
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactInformation'
          description: |
            Contact information for the maintainers of the EpiLink instance
    FooterUrl:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    ContactInformation:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    # ---------------------- /user schemas ----------------------
    UserInformation:
      description: Information about the currently logged in user
      type: object
      properties:
        discordId:
          type: string
          description: The ID of the user. This is stored in the instance's database.
        username:
          type: string
          description: The user's Discord username (Hello#1234). This is stored as part of the session and is not stored in the instance's database.
        avatarUrl:
          type: string
          format: url
          nullable: true
          description: The possibly null URL for the Discord avatar of the user
        identifiable:
          type: boolean
          description: If true, the user has their identity recorded in the database, false otherwise.
        privileged:
          type: boolean
          description: |
            True if the user is privileged (i.e. is recorded as an administrators in the instance configuration).

            This does not necessarily indicate that the user can actually perform administration actions, as additional
            checks are performed when an admin tries to user their privileges. This should only be used for displaying
            some sort of "admin" badge on the user.
  responses:
    UserUnauthorized:
      description: Missing or invalid `SessionId`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            message: "You need authentication to be able to access this resource"
            message_i18n: "err.300"
            message_i18n_data: {}
            data:
              code: 300
              description: "You need authentication to be able ot access this resource"
  securitySchemes:
    SessionId:
      type: apiKey
      in: header
      name: SessionId
