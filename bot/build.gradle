plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id 'java'
    id 'application'
}

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    main.kotlin.srcDirs = ["src"]
    main.resources.srcDirs = ["resources"]
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}

application {
    mainClassName = "org.epilink.bot.MainKt"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-auth:$ktorVersion"
    implementation "io.ktor:ktor-auth-jwt:$ktorVersion"
    implementation "io.ktor:ktor-jackson:$ktorVersion"
    implementation "io.ktor:ktor-client-apache:$ktorVersion"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"

    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-java-time:$exposedVersion"
    implementation "org.xerial:sqlite-jdbc:3.30.1"

    implementation "com.xenomachina:kotlin-argparser:2.0.7"
}


import java.nio.file.FileAlreadyExistsException
import java.nio.file.Files
import java.nio.file.Paths

// Front-end bootstrapping support
// Can be enabled via -PwithFrontend

task bootstrapFrontEnd {
    dependsOn 'bundleFrontEndIntoResources'
    doLast {
        try {
            Files.createFile(Paths.get("$buildDir/resources/main/.hasFrontend"))
        } catch (FileAlreadyExistsException ignored) {
        }
    }
}

task bundleFrontEndIntoResources(type: Copy) {
    dependsOn ':web:bundleWeb'
    mustRunAfter 'processResources'
    from '../web/build/web'
    into 'build/resources/main/frontend'
    duplicatesStrategy DuplicatesStrategy.INCLUDE // overwrite
}

task cleanFrontEnd(type: Delete) {
    delete "$buildDir/resources/main/frontend", "$buildDir/resources/main/.hasFrontend"
}

if (project.hasProperty("withFrontend")) {
    classes.dependsOn 'bootstrapFrontEnd'
} else {
    classes.dependsOn 'cleanFrontEnd'
}