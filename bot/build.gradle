plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "io.gitlab.arturbosch.detekt" version "$detektVersion"
    id 'java'
    id 'jacoco'
    id 'application'
    id 'distribution'
    id "com.github.hierynomus.license"
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://litarvan.github.io/maven' }
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn", "-Xopt-in=io.ktor.locations.KtorExperimentalLocationsAPI"]
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
}

application {
    mainClass = "org.epilink.bot.MainKt"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm-host:$kotlinVersion"

    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-auth:$ktorVersion"
    implementation "io.ktor:ktor-jackson:$ktorVersion"
    implementation "io.ktor:ktor-locations:$ktorVersion"

    implementation "io.ktor:ktor-client-apache:$ktorVersion"
    implementation "io.ktor:ktor-client-auth-jvm:$ktorVersion"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"

    implementation (group: "ch.qos.logback", name: "logback-classic") {
        version {
            strictly "[$logbackVersion]"
        }
    }
    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-java-time:$exposedVersion"
    implementation "org.xerial:sqlite-jdbc:$sqliteJdbcVersion"

    implementation "com.xenomachina:kotlin-argparser:$argparserVersion"

    implementation "com.discord4j:discord4j-core:$discord4JVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$coroutinesVersion"

    implementation "io.insert-koin:koin-core:$koinVersion"
    implementation "io.insert-koin:koin-logger-slf4j:$koinVersion"

    implementation "io.lettuce:lettuce-core:$lettuceVersion"

    implementation "guru.zoroark:ktor-rate-limit:$ktorRateLimitVersion"

    implementation "org.bitbucket.b_c:jose4j:$jose4jVersion"

    implementation "org.apache.commons:commons-dbcp2:$dbcp2Version"

    if (project.hasProperty("withFrontend"))
        runtimeOnly project(path: ":epilink-frontend", configuration: "frontendJarCfg")

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "io.insert-koin:koin-test:$koinVersion"
    testImplementation "io.ktor:ktor-server-test-host:$ktorVersion"
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktorVersion"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
}

test {
    useJUnitPlatform()
}

license {
    header rootProject.file("LHEADER")
    // Exclude front-end test files
    exclude("frontend/*")
    // Generated file
    exclude("org/epilink/bot/Version.kt")
}

// TODO Remove this when the default JaCoCo version is updated
jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}


distributions {
    main {
        if (project.hasProperty("withFrontend"))
            distributionBaseName = "epilink-backend-withFrontend"
        contents {
            from "../LICENSE"
        }
    }
}


/* ###################################################################
 * ################# Project version file generation #################
 * ###################################################################
 */

// From https://stackoverflow.com/a/51944448, adapted for Kotlin

task generateKotlin(type: Copy) {
    def templateContext = [version: project.version]
    inputs.properties templateContext
    from 'src/template/kotlin'
    into "$buildDir/generated/kotlin"
    expand templateContext
}

sourceSets.main.kotlin.srcDir "$buildDir/generated/kotlin"
compileKotlin.dependsOn generateKotlin
