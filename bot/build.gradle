plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "com.github.ben-manes.versions" version "0.31.0"
    id 'java'
    id 'application'
    id "com.github.hierynomus.license"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

version = "0.6.1"

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
}

application {
    mainClassName = "org.epilink.bot.MainKt"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm-host:$kotlinVersion"

    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-auth:$ktorVersion"
    implementation "io.ktor:ktor-jackson:$ktorVersion"
    implementation "io.ktor:ktor-client-apache:$ktorVersion"
    implementation "io.ktor:ktor-client-auth-jvm:$ktorVersion"

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"

    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-java-time:$exposedVersion"
    implementation "org.xerial:sqlite-jdbc:$sqliteJdbcVersion"

    implementation "com.xenomachina:kotlin-argparser:$argparserVersion"

    implementation "com.discord4j:discord4j-core:$discord4JVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$coroutinesVersion"

    implementation "org.koin:koin-core:$koinVersion"
    implementation "org.koin:koin-logger-slf4j:$koinVersion"

    implementation "io.lettuce:lettuce-core:$lettuceVersion"

    implementation "guru.zoroark:ktor-rate-limit:$krlVersion"

    implementation "org.bitbucket.b_c:jose4j:$jose4jVersion"

    implementation "org.apache.commons:commons-dbcp2:$dbcp2Version"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlinVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.koin:koin-test:$koinVersion"
    testImplementation "io.ktor:ktor-server-test-host:$ktorVersion"
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktorVersion"
    // see https://github.com/mockk/mockk/issues/397#issuecomment-570799334
    // testRuntimeOnly "net.bytebuddy:byte-buddy:1.10.10"
}

test {
    useJUnitPlatform()
}

license {
    header rootProject.file("LHEADER")
    // Exclude front-end test files
    exclude("frontend/*")
    // Generated file
    exclude("org/epilink/bot/Version.kt")
}

/* ############################################################
 * ################# Versions plugin settings #################
 * ############################################################
 */

// Versions config for the Gradle versions plugin, from the readme
// https://github.com/ben-manes/gradle-versions-plugin

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex) || version.contains("-M")
}

dependencyUpdates {
    // Reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

/* ###################################################################
 * ################# Front-end bootstrapping support #################
 * ###################################################################
 */
// Can be enabled via -PwithFrontend

import java.nio.file.FileAlreadyExistsException
import java.nio.file.Files
import java.nio.file.Paths

task bootstrapFrontEnd {
    dependsOn 'bundleFrontEndIntoResources'
    doLast {
        try {
            Files.createFile(Paths.get("$buildDir/resources/main/.hasFrontend"))
        } catch (FileAlreadyExistsException ignored) {
        }
    }
}

task bundleFrontEndIntoResources(type: Copy) {
    dependsOn ':epilink-frontend:bundleWeb'
    mustRunAfter 'processResources'
    from '../build/web'
    into 'build/resources/main/frontend'
    duplicatesStrategy DuplicatesStrategy.INCLUDE // overwrite
}

task cleanFrontEnd(type: Delete) {
    delete "$buildDir/resources/main/frontend", "$buildDir/resources/main/.hasFrontend"
}

if (project.hasProperty("withFrontend")) {
    classes.dependsOn 'bootstrapFrontEnd'
} else {
    classes.dependsOn 'cleanFrontEnd'
}

/* ###################################################################
 * ################# Project version file generation #################
 * ###################################################################
 */

// From https://stackoverflow.com/a/51944448, adapted for Kotlin

task generateKotlin(type: Copy) {
    def templateContext = [version: project.version]
    inputs.properties templateContext
    from 'src/template/kotlin'
    into "$buildDir/generated/kotlin"
    expand templateContext
}
sourceSets.main.kotlin.srcDir "$buildDir/generated/kotlin"
compileKotlin.dependsOn generateKotlin